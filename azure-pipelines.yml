# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4
  variables:
    _PIP_CACHE_DIR: '$(HOME)/.cache'
    _PIP_CACHE_KEY: 'pip3_$(python.version)'
    _CCACHE_DIR: '$(HOME)/.ccache'
    _CCACHE_KEY: 'ccache4_$(python.version)'

  steps:
  - checkout: self
    fetchDepth: 1

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - bash: |
      sudo apt-get install ccache -y
      ccache -s
      export PATH="/usr/lib/ccache:${PATH}"
      echo "##vso[task.setvariable variable=PATH]$PATH"

      # which gcc
      # ls -la $(which gcc)
      # sudo /usr/sbin/update-ccache-symlinks
      #which ccache
      #sudo ln -s ccache /usr/local/bin/gcc

      which gcc
      ls -la $(which gcc)
    displayName: Install ccache

  - bash: printenv

  - task: RestoreCache@0
    inputs:
      key: $(_PIP_CACHE_KEY)
      path: $(_PIP_CACHE_DIR)
    displayName: Restore PIP cache

  - task: RestoreCache@0
    inputs:
      key: $(_CCACHE_KEY)
      path: $(_CCACHE_DIR)
    displayName: Restore ccache cache

  - script: |

      python -m pip install --upgrade pip
      pip install -r requirements/testing/travis_all.txt -r requirements/testing/travis36.txt

    displayName: 'Install dependencies'

  - script: |

      export MPLLOCALFREETYPE=1
      pip install -ve .

    displayName: "Install self"

  - task: SaveCache@0
    inputs:
      key: $(_PIP_CACHE_KEY)
      path: $(_PIP_CACHE_DIR)
    displayName: Save PIP cache

  - task: SaveCache@0
    inputs:
      key: $(_CCACHE_KEY)
      path: $(_CCACHE_DIR)
    displayName: Save ccache cache 

  # - script: |
  #     env
  #     pytest --junitxml=junit/test-results.xml -raR --maxfail=50 --timeout=300 --durations=25 --cov-report= --cov=lib -n 2 --log-level=DEBUG
  #   displayName: 'pytest'

  # - task: PublishTestResults@2
  #   inputs:
  #     testResultsFiles: '**/test-results.xml'
  #     testRunTitle: 'Python $(python.version)'
  #   condition: succeededOrFailed()
